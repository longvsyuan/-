/**
* [中间人]
* 主机名 = biz.caiyunapp.com
* 作者 Github：https://github.com/blackmatrix7
* [脚本]
* 彩云天气_SVIP = type=http-response,requires-body=1,max-size=0,pattern=https?:\/\/biz\.caiyunapp\.com\/(membership_rights|v2\/user) ,script-path=https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/script/caiyun/caiyun_svip.js
*
*/

const  SCRIPT_NAME  =  '彩云天气' ;
const  USER_REGEX  =  / https?: \/ \/ biz \.彩云应用\。com \/ v2 \/用户/ ;
const  RIGHTS_REGEX  =  / https?: \/ \/ biz \.彩云应用\。com \/ membership_rights / ;
结果 =  { _ 
  is_vip：真的，
  vip_type : "s" ,
  svip_expired_at：1882066669.9452950954 ，
}
RESULT_WT  = { _  
  贵宾：{
    启用：真，
    svip_expired_at：1882066669.9452950954
  }
}
属性 =  { _  
  “结果”：[
    { 
      “名称”：“\u514d\u5e7f\u544a” ， 
      “启用”：是的， 
      "vip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/vip-ads-free.png" ,
      “贵宾”：真的， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee08f” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-ads-free.png" 
    } , 
    { 
      “名称”：“\u591a\u5730\u5929\u6c14\u63a8\u9001” ， 
      “启用”：是的， 
      "vip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/vip-custom-push.png" , 
      “贵宾”：真的， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee090” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-custom-push.png" 
    } , 
    { 
      “名称”：“\u964d\u6c34\u63d0\u9192” ， 
      “启用”：是的， 
      "vip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/vip-rain-notification.png" , 
      “贵宾”：真的， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee091” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-rain-notification.png" 
    } , 
    { 
      “名称”：“\u536b\u661f\u4e91\u56fe” ， 
      “启用”：是的， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee092” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-satellite-clouds.png" 
    } , 
    { 
      "名称" : "\u4e91\u91cf" , 
      “启用”：是的， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的，
      “_id”：“5ee5eb091d28d2634a2ee093” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-cloud-cover.png"
    } , 
    { 
      “名称”：“\u6c14\u6e29\u9884\u62a5” ， 
      “启用”：是的， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee094” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-tmp-forecast.png"
    } , 
    { 
      “名称”：“\u9732\u70b9\u6e29\u5ea6\u9884\u62a5” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee095” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-dew-point-tmp-forecast.png" 
    } , 
    { 
      “名称”：“\u77ed\u6ce2\u8f90\u5c04\u901a\u91cf” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee096” ， 
      “svip_icon”：“https://cdn.caiyunapp.com/ad/img/membership_rights/svip-short-wave-radiation.png” 
    } , 
    { 
      “名称”：“\u6c14\u538b” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee097” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-pressure.png" 
    } , 
    { 
      “名称”：“\u80fd\u89c1\u5ea6” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee098” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-visibility.png" 
    } , 
    { 
      “名称”：“\u6e7f\u5ea6\u9884\u62a5” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee099” ， 
      “svip_icon”：“https://cdn.caiyunapp.com/ad/img/membership_rights/svip-humidity-forecast.png” 
    } , 
    { 
      “名称”：“2\u5929\u964d\u96e8\u9884\u62a5\u56fe” ， 
      “启用”：真， 
      “vip_icon”：空， 
      “贵宾”：假， 
      “svip”：是的， 
      “_id”：“5ee5eb091d28d2634a2ee09a” ， 
      "svip_icon" : "https://cdn.caiyunapp.com/ad/img/membership_rights/svip-rain-forecast.png" 
    }
  ] , 
  “rc”：0 
}

让 magicJS  =  MagicJS ( SCRIPT_NAME ) ;

函数 主( ) {
  如果 （magicJS。isResponse ）{ _ _
    if (USER_REGEX.test(magicJS.request.url)){
      try{
        let obj = JSON.parse(magicJS.response.body);
        Object.assign(obj['result'], RESULT)
        Object.assign(obj['result']['wt'], RESULT_WT)
        let body = JSON.stringify(obj);
        magicJS.done({body});
      }
      catch(err){
        magicJS.log(`解锁SVIP失败，异常信息${err}`);
        magicJS.done();
      }
    }
    if (RIGHTS_REGEX.test(magicJS.request.url)){
      让 身体 =  JSON 。字符串化（权利）；
      魔术师。完成（{正文} ）；
    }
  }
}

主要( ) ;

功能 MagicJS ( scriptName = 'MagicJS' ,  logLevel = 'INFO' ) {

  返回 新 类{
    构造函数( ) {
      这个。脚本名 = 脚本名；
      这个。日志级别 = 这个。getLogLevels ( logLevel.toUpperCase ( ) ) ; _ _
      这个。节点 =  { '请求'：未定义， 'fs'：未定义， '数据'：{ } } ；
      如果 （这个。isNode ）{ _
        这个。节点。fs  = 要求( 'fs' ) ;
        this.node.request = require('request');
        try{
          this.node.fs.accessSync('./magic.json');
        }
        catch(err){
          this.logError(err);
          this.node.fs.writeFileSync('./magic.json', '{}')
        }
        this.node.data = require('./magic.json');
      }
      if (this.isJSBox){
        if (!$file.exists('drive://MagicJS')){
          $file.mkdir('drive://MagicJS');
        }
        if (!$file.exists('drive://MagicJS/magic.json')){
          $file.write({
            数据：$数据（{字符串：'{}' } ），
            路径：'drive://MagicJS/magic.json'
          } )
        }
      }
    }
    
    获取 版本( )  {  return  'v2.1.4'  } ;
    get  isSurge ( )  {  return  typeof  $httpClient  !==  'undefined'  &&  ! 这个。isLoon  } ;
    get  isQuanX ( )  {  return  typeof  $task  !==  'undefined'  } ;
    get isLoon() { return typeof $loon !== 'undefined' };
    get isJSBox() { return typeof $drive !== 'undefined'};
    get isNode() { return typeof module !== 'undefined' && !this.isJSBox };
    获取 isRequest ( )  {  return  ( typeof  $request  !==  'undefined' )  &&  ( typeof  $response  ===  'undefined' ) }
    获取 isResponse ( )  {  return  typeof  $response  !==  'undefined'  }
    获取 请求（） { 返回 （类型 $请求 ！==  '未定义' ）？$请求：未定义 }
    get response() { 
      if (typeof $response !== 'undefined'){
        if ($response.hasOwnProperty('status')) $response['statusCode'] = $response['status']
        if ($response.hasOwnProperty('statusCode')) $response['status'] = $response['statusCode']
        返回 $响应；
      }
      否则{
        返回 未定义；
      }
    }

    获取 日志级别( ) {
      返回 {
        调试：4 ，
        信息：3 ，
        警告：2 ，
        错误：1 ，
        关键：0
      } ;
    } 

    getLogLevels (级别) {
      试试{
        if  ( this.isNumber ( level ) ) { _ _
          回报 水平；
        }
        否则{
          let levelNum = this.logLevels[level];
          if (typeof levelNum === 'undefined'){
            this.logError(`获取MagicJS日志级别错误，已强制设置为DEBUG级别。传入日志级别：${level}。`)
            return this.logLevels.DEBUG;
          }
          else{
            return levelNum;
          }
        }
      }
      catch(err){
        this.logError(`获取MagicJS日志级别错误，已强制设置为DEBUG级别。传入日志级别：${level}，异常信息：${err}。`)
        return this.logLevels.DEBUG;
      }
    }

    read(key, session=''){
      let val = '';
      // 读取原始数据
      if (this.isSurge || this.isLoon) {
        val = $persistentStore.read(key);
      }
      else if (this.isQuanX) {
        val = $prefs.valueForKey(key);
      }
      else if (this.isNode){
        val = this.node.data;
      }
      else if (this.isJSBox){
        val = $file.read('drive://MagicJS/magic.json').string;
      }
      try {
        // Node 和 JSBox数据处理
        if (this.isNode) val = val[key]
        if (this.isJSBox) val = JSON.parse(val)[key];
        // 带Session的情况
        if (!!session){
          if(typeof val === 'string') val = JSON.parse(val);
          值 =  ！！val  &&  typeof  val  ===  'object' ? val [会话]：空；
        }
      } 
      抓住 （错误）{ 
        这个。logError ( `引发异常：${ err } ` ) ;
        值 =  ！！会议？{ }：空；
        这个。删除（键）；
      }
      if (typeof val === 'undefined') val = null;
      try {if(!!val && typeof val === 'string') val = JSON.parse(val)} catch(err) {}
      this.logDebug(`read data [${key}]${!!session? `[${session}]`: ''}(${typeof val})\n${JSON.stringify(val)}`);
      return val;
    };

    write(key, val, session=''){
      让 数据 =  ！！会议？{ } : '' ;
      // 读取手机的JSON格式
      if  ( !! session && ( this.isSurge || this.isLoon ) ) { _ _ _ _ _     
        数据 =  $persistentStore 。读（键）；
      }
      否则 if  ( ! session && this .isQuanX ) { _ _   
        data = $prefs.valueForKey(key);
      }
      else if (this.isNode){
        data = this.node.data;
      }
      else if (this.isJSBox){
        data = JSON.parse($file.read('drive://MagicJS/magic.json').string);
      }
      if (!!session){
        // 有Session，要求所有数据都是Object
        try {
          if  ( typeof  data  ===  'string' ) 数据 =  JSON 。解析（数据）
          数据 = 数据类型 === ' 对象' && ！！数据？数据：{ } ；    
        }
        抓住（错误）{
          这个。logError ( `引发异常：${ err } ` ) ;
          这个。删除（键）； 
          数据 =  { } ;
        };
        if (this.isJSBox || this.isNode){
          // 构造数据
          if (!data.hasOwnProperty(key) || typeof data[key] != 'object'){
            data[key] = {};
          }
          if (!data[key].hasOwnProperty(session)){
            data[key][session] = null;
          }
          // 写入或删除数据
          if (typeof val === 'undefined'){
            delete data[key][session];
          }
          else{
            data[key][session] = val;
          }
        }
        else {
          // 写入或删除数据      
          if (typeof val === 'undefined'){
            delete data[session];
          }
          else{
            data[session] = val;
          }
        }
      }
      // 没有Session时
      else{
        if (this.isNode || this.isJSBox){
          // 删除数据
          if (typeof val === 'undefined'){
            delete data[key];
          }
          else{
            data[key] = val;
          }
        }        
        else{    
          // 删除数据      
          if (typeof val === 'undefined'){
            data = null;
          }
          else{
            data = val;
          }
        }
      }
      // 数据回写
      if (typeof data === 'object') data = JSON.stringify(data);
      if (this.isSurge || this.isLoon) {
        $persistentStore.write(data, key);
      }
      else if (this.isQuanX) {
        $prefs.setValueForKey(data, key);
      }
      else if (this.isNode){
        this.node.fs.writeFileSync('./magic.json', data)
      }
      否则 if  ( this .isJSBox ) { _
        $文件。写（{数据：$数据（{字符串：数据} ）， 路径：'drive://MagicJS/magic.json' } ）；
      }
      this.logDebug(`write data [${key}]${!!session? `[${session}]`: ''}(${typeof val})\n${JSON.stringify(val)}`);
    };

    del(key, session=''){
      this.logDebug(`delete key [${key}]${!!session ? `[${session}]`:''}`);
      this.write(key, undefined, session);
    }

    /**
     * iOS系统通知
     * @param {*} title 通知标题
     * @param {*} subTitle 通知副标题
     * @param {*} body 通知内容
     * @para选项通知选项，当前支持超链接{ *或对象
     * Surge 不支持通知选项，Loon 支持打开 URL，QuantumultX 仅支持打开 URL 和多媒体通知
     * 选项“applestore://”打开Apple Store
     * 选项“https://www.apple.com.cn/”打开Apple.com.cn
     * options {'open-url': 'https://www.apple.com.cn/'}打开Apple.com.cn
     * 选项 {'open-url': 'https://www.apple.com.cn/', 'media-url': 'https://raw.githubusercontent.com/Orz-3/mini/master/Apple .png'}打开Apple.com.cn，显示一个苹果Logo
     */ 
    notify(title=this.scriptName, subTitle='', body='', options=''){
      let convertOptions = (_options) =>{
        let newOptions = '';
        if (typeof _options === 'string'){
          if (this.isLoon) newOptions = _options;
          否则 if  ( this .isQuanX ) newOptions = { ' open -url' : _options } ;   
        }
        否则 if  ( typeof  _options  ===  'object' ) {
          if  ( this.isLoon ) newOptions = ! _ _  ！_options [ 'open-url' ]？_options [ 'open-url' ] : '' ;  
          否则 if  ( this .isQuanX ) newOptions = ! _ ！_options [ 'open-url' ] || ！！_options [ '媒体网址' ]？_options : { } ;     
        }
        返回 新选项；
      }
      选项 = 转换选项（选项）；
      // 支持参数通知
      如果 （参数。长度 ==  1 ）{
        标题 = 这个。脚本名称；
        subTitle = '',
        body = arguments[0];
      }
      if (this.isSurge){
        $notification.post(title, subTitle, body);
      }
      else if (this.isLoon){
        // 2020.08.11 Loon2.1.3(194)TF 如果不加这个log，在跑测试用例连续6次通知，会漏掉一些通知，已反馈给作者。
        this.logInfo(`title: ${title}, subTitle：${subTitle}, body：${body}, options：${options}`);
        if (!!options) $notification.post(title, subTitle, body, options);
        else $notification.post(title, subTitle, body);
      }
      否则 if  ( this .isQuanX ) { _ 
         $notify (标题, 子标题, 正文, 选项) ;
      }
      否则 if  ( this . isNode )  {
        这个。日志（` ${ title }  ${ subTitle } \n ${ body } ` ）；
      }
      否则 if  ( this .isJSBox ) { _
        让 推 =  {
          标题：标题，
          body: !!subTitle ? `${subTitle}\n${body}` : body,
        }
        $push.schedule(push);
      } 
    }
    
    log(msg, level="INFO"){
      if (this.logLevel >= this.getLogLevels(level.toUpperCase())) console.log(`[${level}] [${this.scriptName}]\n${msg}\n`)
    }

    logDebug(msg){
      this.log(msg, "DEBUG");
    }

    logInfo(msg){
      this.log(msg, "INFO");
    }

    logWarning(msg){
      this.log(msg, "WARNING");
    }

    logError(msg){
      this.log(msg, "ERROR");
    }
    
    get(options, callback){
      让 _options  =  typeof  options  ===  'object'？对象。分配（{ } ， 选项）：选项；
      这个。logDebug ( `http get : $ { JSON.stringify ( _options ) } ` ) ;
      if  ( this.isSurge || this.isLoon ) { _ _  _ _  
        $http客户端。获取（_options ， 回调）；
      }
      else if (this.isQuanX) {
        if (typeof _options === 'string') _options = { url: _options }
        _options['method'] = 'GET'
        $task.fetch(_options).then(
          resp => {
            resp['status'] = resp.statusCode
            callback(null, resp, resp.body)
          },
          reason => callback(reason.error, null, null),
        )
      }
      else if(this.isNode){
        return this.node.request.get(_options, callback);
      }
      else if(this.isJSBox){
        _options  =  typeof  _options  ===  'string' ? { 'url' : _options } : _options ;
        选项[ 'header' ]  =  _options [ 'headers' ] ;
        删除 _options [ 'headers' ]
        _options [ 'handler' ]  =  ( resp ) => {
          让 err  =  resp 。错误？JSON 。stringify ( resp .错误) : undefined ;
          让 data  =  typeof  resp 。数据 ===  '对象' ? JSON 。字符串化（对应数据）：对应。数据；
          回调（错误， 响应，数据）；_ _ 
        }
        $http.get(_options);
      }
    }

    post(options, callback){
      let _options = typeof options === 'object'? Object.assign({}, options): options;
      this.logDebug(`http post: ${JSON.stringify(_options)}`);
      if  ( this.isSurge || this.isLoon ) { _ _  _ _  
        $http客户端。发布（_options ， 回调）；
      }
      否则 if  ( this .isQuanX ) { _ 
        if  ( typeof  _options  ===  'string' )  _options  =  {  url : _options  }
        if  ( _options . hasOwnProperty ( 'body' )  &&  typeof  _options [ 'body' ]  !==  'string' )  _options [ 'body' ]  =  JSON 。字符串化（_options [ 'body' ] ）；
        _options [ '方法' ]  =  'POST'
        $任务。获取（_options ）。那么（
          响应 =>  {
            resp['status'] = resp.statusCode
            callback(null, resp, resp.body)
          },
          reason => {callback(reason.error, null, null)}
        )
      }
      else if(this.isNode){
        if (typeof _options.body === 'object') _options.body = JSON.stringify(_options.body);
        return this.node.request.post(_options, callback);
      }
      else if(this.isJSBox){
        _options = typeof _options === 'string'? {'url': _options} : _options;
        _options['header'] = _options['headers'];
        delete _options['headers']
        _options['handler'] = (resp)=>{
          让 err  =  resp 。错误？JSON 。stringify ( resp .错误) : undefined ;
          让 data  =  typeof  resp 。数据 ===  '对象' ? JSON 。字符串化（对应数据）：对应。数据；
          回调（错误， 响应，数据）；_ _ 
        }
        $http.post(_options);
      }
    }

    done(value = {}){
      if (typeof $done !== 'undefined'){
        $done(value);
      }
    }

    isToday(day){
      if (day == null){
          return false;
      }
      else{
        let today = new Date();
        if (typeof day == 'string'){
            day = new Date(day);
        }
        if (today.getFullYear() == day.getFullYear() && today.getMonth() == day.getMonth() && today.getDay() == day.getDay()){
            return true;
        }
        else{
            return false;
        }
      }
    }

    isNumber(val) {
      return parseFloat(val).toString() === "NaN"? false: true;
    }

    /**
     * 对await执行中出现的异常进行捕获并返回，避免写过多的try catch语句
     * @param {*} promise Promise 对象
     * @param {*} defaultValue 出现异常时返回的默认值
     * @returns 返回两个值，第一个值为异常，第二个值为执行结果
     */
    attempt(promise, defaultValue=null){ return promise.then((args)=>{return [null, args]}).catch(ex=>{this.log('raise exception:' + ex); return [ex, defaultValue]})};

    /**
     * 重试方法
     * @param { * } fn 需要重试的函数
     * @param { number } [retries=5] 重试次数
     * @param { number interval=0] [每次重试间隔
     * @parallel异常的函数} [回调函数中没有异常的结果，回调函数执行结果的回调函数，根据结果进行回调，根据结果，如果判断，需要再次测试，在抛出函数没有异常但仍然需要重试的情况。
     * @returns返回一个承诺对象
     */
    重试（fn ， 重试= 5 ， 间隔= 0 ， 回调= null ） {
      返回 ( ... args ) => {
        return  new  Promise ( ( resolve ,  reject )  => {
          函数 _retry ( ... args ) {
            承诺。解决( ) 。然后( ( ) = > fn.apply ( this , args ) ) 。_ 那么（
              结果 =>  {
                if  ( typeof  callback  ===  'function' ) {
                  Promise.resolve().then(()=>callback(result)).then(()=>{resolve(result)}).catch(ex=>{
                    if (retries >= 1 && interval > 0){
                      setTimeout ( ( )  =  > _ retry.apply ( this , args ) , interval ) ;  
                    }
                    否则 如果 （重试 > =  1 ） {
                      _重试。应用（这个， 参数）；
                    }
                    否则{
                      拒绝（前）；
                    }
                    重试 —— ;
                  } ) ;
                }
                否则{
                  解决（结果）；
                }
              }
              ) . 抓住（前=> {
              if  (重试 >=  1  && 间隔 >  0 ) {
                setTimeout ( ( )  =  > _ retry.apply ( this , args ) , interval ) ;  
              }
              否则 如果 （重试 > =  1 ） {
                _重试。应用（这个， 参数）；
              }
              否则{
                拒绝（前）；
              }
              重试 —— ;
            } )
          }
          _重试。应用（这个， 参数）；
        } ) ;
      } ;
    }

    formatTime (时间,  fmt = "yyyy-MM-dd hh:mm:ss" )  {
      var  o  =  {
        “M+”：时间。获取月份( )  +  1 ,
        “d+”：时间。获取日期( ) ,
        “h+”：时间。获取时间（），
        “m+”：时间。获取分钟( ) ,
        “s+”：时间。getSeconds ( ) ,
        “q+”：数学。地板（（时间。getMonth （）+ 3 ）/ 3 ），_    
        “S”：时间。获取毫秒( )
      } ;
      如果 ( / ( y + ) / .测试( fmt ) )  fmt  =  fmt 。替换（正则表达式。$1 ， （时间。getFullYear （）+ “” ）。substr （4-正则表达式。$ 1 。长度））；    
      for  ( let  k  in  o )  if  ( new  RegExp ( "("  +  k  +  ")" ) . test ( fmt ) )  fmt  =  fmt . 替换( RegExp . $1 ,  ( RegExp . $1 .length == 1 ) ? ( o [ k ] ) : ( ( "00 " + o [    k ] ) 。substr ( ( ""  +  o [ k ] ) .长度) ) ) ;
      返回 fmt ;
    } ;

    现在( ) {
      返回 这个。formatTime ( new  Date ( ) ,  "yyyy-MM-dd hh:mm:ss" ) ;
    }

    睡眠（时间） {
      return  new  Promise ( resolve  =>  setTimeout ( resolve ,  time ) ) ;
    }
    
  } (脚本名) ;
}
